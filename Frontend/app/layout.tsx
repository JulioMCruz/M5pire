"use client";

// import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider"
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

import {
  DynamicContextProvider,
  EthereumWalletConnectors,
} from "../lib/dynamic";


const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
    },
  },
});

const dynamicEnvId = process.env.NEXT_PUBLIC_DYNAMIC_ENV_ID;

// Setting up list of evmNetworks
const evmNetworks = [
  {
    blockExplorerUrls: ['https://sepolia.etherscan.io/'],
    chainId: 11155111,
    chainName: 'Sepolia',
    iconUrls: ['https://app.dynamic.xyz/assets/networks/eth.svg'],
    name: 'Sepolia',
    nativeCurrency: {
      decimals: 18,
      name: 'Sepolia Ether',
      symbol: 'ETH',
    },
    networkId: 11155111,
    rpcUrls: ['https://sepolia.infura.io/v3/'],
    vanityName: 'Sepolia',
  },
{
    blockExplorerUrls: ['https://explorer.testnet.rsk.co/'],
    chainId: 31,
    chainName: 'Rootstock Testnet',
    iconUrls: ['https://app.dynamic.xyz/assets/networks/eth.svg'],
    name: 'Rootstock Testnet',
    nativeCurrency: {
      decimals: 18,
      name: 'Rootstock Testnet BTC',
      symbol: 'rBTC',
    },
    networkId: 31,
    rpcUrls: ['https://public-01.testnet.rsk.co/rpc'],
    vanityName: 'Rootstock Testnet',
  },
  {
    blockExplorerUrls: ['https://evm-sidechain.xrpl.org'],
    chainId: 1440002,
    chainName: 'XRPL EVM Sidechain',
    iconUrls: ["https://app.dynamic.xyz/assets/networks/eth.svg"],
    name: 'XRPL EVM Sidechain',
    nativeCurrency: {
      decimals: 18,
      name: 'XRP',
      symbol: 'XRP',
    },
    networkId: 1440002,
    rpcUrls: ['https://rpc-evm-sidechain.xrpl.org'],
    vanityName: 'XRPL',
  },
];

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  if (!dynamicEnvId) {
    const errMsg =
      "Please add your Dynamic Environment to this project's .env file";
    console.error(errMsg);
    throw new Error(errMsg);
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QueryClientProvider client={queryClient}>
          <DynamicContextProvider
          settings={{
            environmentId: dynamicEnvId,
            walletConnectors: [EthereumWalletConnectors],
            overrides: { evmNetworks },
          }}>      

            <ThemeProvider
              attribute="class"
              defaultTheme="dark"
              enableSystem
              disableTransitionOnChange
            >
              {children}
            </ThemeProvider>        
          </DynamicContextProvider>
        </QueryClientProvider>
      </body>
    </html>
  );
}
